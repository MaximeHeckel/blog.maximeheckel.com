---
title: 'The 2020s guide to Continuous Integration and Delivery for frontend developers'
subtitle: How to ship your app faster, more reliably and make your team unstoppable with automation.
date: '2020-07-31T08:00:00.000Z'
categories: []
keywords: ['tests', 'release', 'production', 'development', 'continuous integration continuous delivery', 'end-to-end testing', 'e2e', 'unit-testing', 'integration-testing', 'branch preview', 'feature flags', 'accessibility', 'pipeline']
slug: 2020-guide-to-cicd-for-frontend-developers
featured: true
colorFeatured: 'linear-gradient(160deg,rgb(74, 123, 210) 0%,rgba(28,90,221,0.55) 69%)'
fontFeatured: '#FFFFFF'
---


If you've been following my work for a while, or read my previous articles, you might have noticed that I love building tools that improve the reliability and the scalability of the projects I work on, and  **C**ontinuous **I**ntegration and **C**ontinuous **D**elivery pipeline, also referred to as **CI/CD**, is one of them.
Building such a pipeline and making it as automated as possible, is like giving superpowers to your team. With it, you can enable your organization to deliver:

- Code that respects consistent styling guidelines and formatting
- Reliable software is tested and so are its subsequent releases to avoid regressions
- Consistent releases: releasing a new version to the customer is as easy as possible and your team can ship fixes to production in no time
- Features that can easily be reverted if they degrade the user experience
- Any upcoming change to the product can be previewed as an independent unit of change
- Use every developer's time as efficiently as possible. Developer's cost money and you don't want them to be constantly putting out fires in production.  Automate testing and releases, remove all the humans in the process as much as possible. More testing means fewer bugs means less fear of change. Less fear of change means more experimentation and innovation. More automation means more time for experimentation and innovation.

> Change must be in the DNA of the team -- [Eric Elliott in How to Build a High Velocity Development Team](https://medium.com/javascript-scene/how-to-build-a-high-velocity-development-team-4b2360d34021)

If your team suffers from complex release processes, struggles to patch production within the same day or to get a new feature to the customers reliably: **this article is for you!**
In this post, I'll give you all the tools that you and your team need to build a high-velocity development environment, eradicate the fear of releasing, and establishing processes **for your team to become unstoppable**.  Like the title suggests, the following will be written for frontend developers since this is the area where I'm the most knowledgeable, especially when it comes to tooling. However, the concepts and steps that I will detail can also be valuable to backend developers who are looking to improve their team's testing and release pipeline.

## The impact of automation on your team, org and customers

When starting to work on a new CI/CD pipeline, or looking at improving an existing one, it's essential to target the efforts where you want to make the most positive impact:

- **unit-testing, formatting, linting, or type checking**: impact mainly the developer within your team. Having a good habit of writing unit tests, and having consistent code styling can increase velocity within the team. These are what I called fast to run fast to fail: they can be run quickly to identify any issues withing the codebase and act as the first safeguard against bugs.

<Callout variant="info">

I'd sneak in **integration-testing** in between this step and the next one. They are UI tests only where the backend layer is "mocked", but they still require the frontend team and backend team to work hand in hand to define a consistent spec.

</Callout>

- **end to end testing, automated release, and branch previews** are more impactful at the cross-functional or organizational level. **End to End testing** will, for example, enable **your frontend team and backend team** to test some critical user paths. **The automated releases** ensure things are released with as little friction as possible and that your entire org can address a customer request as fast as possible. Finally, **branch previews** enable **your frontend team and QA team** to review, work before it lands on production. Each upcoming feature or fix can be hosted in its service and tested on its own.
- **feature flags and accessibility testing** are more customer-facing. They guarantee a better and more inclusive experience for all your users and also avoid any service disruption when it comes to releasing new features.

The following showcases what is a rather complete CI/CD pipeline is composed of and which of your team, organization, customers are impacted the most by each step of that said pipeline:


TEAM.           |.        ORG.         |         USER

--------------------------------------------------> 
(TO DO: CHART)



