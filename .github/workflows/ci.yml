name: CI

on:
  pull_request:
    branches:
      - main
      - next
    paths:
      - '**.js'
      - '**.jsx'
      - '**.ts'
      - '**.tsx'
      - '**.yml'
      - '**.json'

jobs:
  install-cache:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12]
    steps:
      - name: Checkout Commit
        uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache yarn dependencies
        uses: actions/cache@v2
        id: cache-dependencies # use this to check for `cache-hit` (`steps.cache-dependencies.cache-hit != 'true'`)
        with:
          path: node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Cache Cypress binary
        id: cache-cypress-binary
        uses: actions/cache@v2
        with:
          path: ~/.cache/Cypress
          key: cypress-binary-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-cypress-
      - name: Install Dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true' || steps.cache-cypress-binary.outputs.cache-hit != 'true'
        run: |
          yarn install --force --non-interactive
  lint-format:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [12]
    needs: install-cache
    steps:
      - name: Checkout Commit
        uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Restore yarn dependencies
        uses: actions/cache@v2
        id: cache-dependencies # use this to check for `cache-hit` (`steps.cache-dependencies.cache-hit != 'true'`)
        with:
          path: node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Run lint
        run: |
          yarn lint
      - name: Run prettier
        run: |
          yarn format
  type-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [12]
    needs: install-cache
    steps:
      - name: Checkout Commit
        uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Restore yarn dependencies
        uses: actions/cache@v2
        id: cache-dependencies # use this to check for `cache-hit` (`steps.cache-dependencies.cache-hit != 'true'`)
        with:
          path: node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Check types
        run: |
          yarn type-check
  unit-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [12]
    needs: install-cache
    steps:
      - name: Checkout Commit
        uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Restore yarn dependencies
        uses: actions/cache@v2
        id: cache-dependencies # use this to check for `cache-hit` (`steps.cache-dependencies.cache-hit != 'true'`)
        with:
          path: node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Run test
        run: |
          yarn test
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [12]
    needs: [lint-format, type-check, unit-test]
    steps:
      - name: Checkout Commit
        uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Restore yarn dependencies
        uses: actions/cache@v2
        id: cache-dependencies # use this to check for `cache-hit` (`steps.cache-dependencies.cache-hit != 'true'`)
        with:
          path: node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Run build
        run: |
          yarn add playwright@1.8.0 && yarn build
        env:
          TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-output
          path: .next
          retention-days: 1
  e2e-tests-chrome:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [12]
    needs: build
    steps:
      - name: Checkout Commit
        uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Restore yarn dependencies
        uses: actions/cache@v2
        id: cache-dependencies # use this to check for `cache-hit` (`steps.cache-dependencies.cache-hit != 'true'`)
        with:
          path: node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Restore Cypress binary
        id: cache-cypress-binary
        uses: actions/cache@v2
        with:
          path: ~/.cache/Cypress
          key: cypress-binary-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-cypress-
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-output
          path: .next
      - name: Run cypress
        uses: cypress-io/github-action@v2.10.1
        with:
          start: yarn start
          browser: chrome
          headless: true
          install: false
  e2e-tests-firefox:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [12]
    needs: build
    steps:
      - name: Checkout Commit
        uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Restore yarn dependencies
        uses: actions/cache@v2
        id: cache-dependencies # use this to check for `cache-hit` (`steps.cache-dependencies.cache-hit != 'true'`)
        with:
          path: node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Restore Cypress binary
        id: cache-cypress-binary
        uses: actions/cache@v2
        with:
          path: ~/.cache/Cypress
          key: cypress-binary-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-cypress-
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-output
          path: .next
      - name: Run cypress
        uses: cypress-io/github-action@v2.10.1
        with:
          start: yarn start
          browser: firefox
          headless: true
          install: false
